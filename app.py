import os
import logging
import asyncio
import requests
from flask import Flask, request, render_template, jsonify
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from flask_cors import CORS
from datetime import datetime, timedelta

# –æ—Ç–∫–ª—é—á–∞–µ–º debug-–ª–æ–≥–∏ flask
log = logging.getLogger('werkzeug')
log.setLevel(logging.ERROR)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
telegram_token = os.environ.get("TELEGRAM_TOKEN")
admin_chat_id = os.environ.get("ADMIN_CHAT_ID")
port = int(os.environ.get("PORT", 10000))  # 10000 –¥–ª—è render

if not telegram_token or not admin_chat_id:
    logger.error(f"TELEGRAM_TOKEN={telegram_token}, ADMIN_CHAT_ID={admin_chat_id}")
    raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
CORS(app)
bot = Bot(token=telegram_token)
telegram_app = Application.builder().token(telegram_token).connection_pool_size(50).pool_timeout(10).build()

# –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∫–æ–º–∞–Ω–¥
last_command_time = {}

# –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    now = datetime.now()
    if user_id in last_command_time and now - last_command_time[user_id] < timedelta(seconds=10):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–∞–º
    last_command_time[user_id] = now
    await update.message.reply_text("–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ cryptodropbot!")

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    now = datetime.now()
    if user_id in last_command_time and now - last_command_time[user_id] < timedelta(seconds=10):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–∞–º
    last_command_time[user_id] = now
    try:
        res = requests.get("https://min-api.cryptocompare.com/data/price?fsym=USDT&tsyms=RUB")
        rate = res.json().get("RUB", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        await update.message.reply_text(f"–∫—É—Ä—Å USDT/RUB: {rate}")
    except Exception as e:
        await update.message.reply_text("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) != admin_chat_id:
        await update.message.reply_text("—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    try:
        user_chat_id = context.args[0]  # chat_id —é–∑–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        await bot.send_message(chat_id=user_chat_id, text="üïí –≤–∞—à –æ—Ä–¥–µ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è, —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!")
        await update.message.reply_text(f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É {user_chat_id}")
    except IndexError:
        await update.message.reply_text("—É–∫–∞–∂–∏ chat_id —é–∑–µ—Ä–∞: /accept_order <chat_id>")
    except Exception as e:
        await update.message.reply_text(f"–æ—à–∏–±–∫–∞: {e}")

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("get_rate", get_rate))
telegram_app.add_handler(CommandHandler("accept_order", accept_order))

# –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop
loop = asyncio.get_event_loop()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
logger.info("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
loop.run_until_complete(bot.initialize())
loop.run_until_complete(telegram_app.initialize())
render_url = os.environ.get("RENDER_EXTERNAL_HOSTNAME", "https://crypto-exchange-12.onrender.com")
webhook_url = f"{render_url}/telegram-webhook"
logger.info(f"—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
try:
    loop.run_until_complete(bot.set_webhook(webhook_url))
    logger.info("–≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
except Exception as e:
    logger.error(f"–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
async def send_message_async(chat_id, text):
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logger.error(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

# flask —Ä–æ—É—Ç—ã
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        amount = request.form.get("amount")
        wallet = request.form.get("wallet")
        user_chat_id = request.form.get("user_chat_id")

        if not amount or not wallet:
            return jsonify({"message": "–≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error": True})

        message = f"üîî –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n—Å—É–º–º–∞ USDT: {amount}\n–∫–æ—à–µ–ª–µ–∫ RUB: {wallet}\nchat_id: {user_chat_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ loop.run_until_complete
            loop.run_until_complete(send_message_async(admin_chat_id, message))
            if user_chat_id:
                loop.run_until_complete(send_message_async(user_chat_id, "‚úÖ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"))
            return jsonify({"message": "OK", "error": False})
        except Exception as e:
            logger.error(f"–æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
            return jsonify({"message": "–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "error": True})

    return render_template("index.html")

# –≤–µ–±—Ö—É–∫ –¥–ª—è telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
@app.route("/telegram-webhook", methods=["POST"])
def telegram_webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        loop.run_until_complete(telegram_app.process_update(update))
        return "", 200
    except Exception as e:
        logger.error(f"–æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return "", 500

# –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=port)
