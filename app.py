from flask import Flask, request, render_template, jsonify
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import logging
import requests
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app = Flask(__name__)
TELEGRAM_TOKEN = "8098295902:AAE8YxldfN-stCXWoA5HW9UUoKunkw2cj88"  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = "789334648"  # ‚Üê –í–∞—à chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = Bot(token=TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AUTHORIZED_USERS = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è chat_id —Ç–µ—Ö, –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª /start

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    AUTHORIZED_USERS[user.id] = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    }
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.")
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö.")

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get('https://min-api.cryptocompare.com/data/price?fsym=USDT&tsyms=RUB ')
        data = response.json()
        rate = data.get('RUB', '–û—à–∏–±–∫–∞')
        if rate != '–û—à–∏–±–∫–∞':
            await update.message.reply_text(f"–ö—É—Ä—Å USDT/RUB: {rate:.2f}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ---
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("get_rate", get_rate))

# --- –†–æ—É—Ç—ã —Å–∞–π—Ç–∞ ---
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        amount = request.form.get('amount')
        wallet = request.form.get('wallet')
        user_chat_id = request.form.get('user_chat_id')

        if not all([amount, wallet]):
            return jsonify({'message': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error': True})

        message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n"
            f"–°—É–º–º–∞ USDT: {amount}\n"
            f"–ö–æ—à–µ–ª–µ–∫ RUB: {wallet}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        asyncio.run(bot.send_message(chat_id=ADMIN_CHAT_ID, text=message))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if user_chat_id and int(user_chat_id) in AUTHORIZED_USERS:
            asyncio.run(bot.send_message(
                chat_id=int(user_chat_id),
                text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
            ))

        return jsonify({
            'message': '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
            'error': False,
            'order_amount': amount,
            'order_wallet': wallet
        })

    return render_template('index.html')


# --- Webhook –¥–ª—è Telegram ---
@app.route('/telegram-webhook', methods=['POST'])
async def telegram_webhook():
    update = Update.de_json(request.get_json(), bot)
    await telegram_app.process_update(update)
    return '', 200


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    WEBHOOK_URL = "https://crypto-exchange-9.onrender.com/telegram-webhook "
    async def set_and_run():
        await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
        await telegram_app.start()
        await telegram_app.updater.stop()  # –í–∞–∂–Ω–æ –¥–ª—è Render
        await app.run_task(host='0.0.0.0', port=5000)

    asyncio.run(set_and_run())
